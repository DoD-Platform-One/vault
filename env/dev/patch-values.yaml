---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vault
  namespace: vault
spec:
  # Increase reconciliation interval for dev
  interval: 1m0s
  values:

    # Vault Helm Chart Value Overrides
    global:
      enabled: true
      tlsDisable: false
      imagePullSecrets:
        - name: private-registry
        
    injector:
      enabled: false
      # Use the Vault K8s Image https://github.com/hashicorp/vault-k8s/
      image:
        repository: "hashicorp/vault-k8s"
        tag:  v0.6.0

      resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 256Mi
            cpu: 250m

    server:
      image:
        # Enterprise Image - license required
        # repository: "hashicorp/vault-enterprise"
        # tag: "1.6.1_ent"
        # tag: "1.5.0_ent" 

        # Non-Enterprise - no license required
        # repository: "hashicorp/vault"
        # tag: "1.6.1"

        # Custom IB UBI8 Vault + HSM
        repository: registry.il2.dso.mil/cnap/vault-dev/hsm-vault
        tag: latest
        pullPolicy: Always

      # These Resource Limits are in line with node requirements in the
      # Vault Reference Architecture for a Small Cluster

      # resources:
      #   requests:
      #     memory: 8Gi
      #     cpu: 2000m
      #   limits:
      #     memory: 16Gi
      #     cpu: 2000m


      # dev resource limits
      resources:
        requests:
          memory: 2Gi
          cpu: 250m
        limits:
          memory: 4Gi
          cpu: 500m

      # For HA configuration and because we need to manually init the vault,
      # we need to define custom readiness/liveness Probe settings
      readinessProbe:
        enabled: false
        path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204" #orinal setting
      livenessProbe:
        enabled: false
        path: "/v1/sys/health?standbyok=true"
        initialDelaySeconds: 60

      # extraEnvironmentVars is a list of extra enviroment variables to set with the stateful set. These could be
      # used to include variables required for auto-unseal.
      extraEnvironmentVars:
        VAULT_CACERT: /vault/userconfig/tls-ca/ca.crt
        VAULT_API_ADDR:  https://$(HOSTNAME).vault-internal:8200   # TEST

      # extraVolumes is a list of extra volumes to mount. These will be exposed
      # to Vault in the path `/vault/userconfig/<name>/`.
      extraVolumes:
        - type: secret
          name: tls-server
        - type: secret
          name: tls-ca
        - type: configMap
          name: cloudhsm-client-cfg
        - type: configMap
          name: cloudhsm-mgmt-util-cfg
        - type: configMap
          name: customer-ca-crt
      
      # THIS IS BROKEN
      volumeMounts:
        - name: userconfig-cloudhsm-client-cfg
          mountPath:  /opt/cloudhsm/etc/cloudhsm_client.cfg
          subPath: cloudhsm_client.cfg
        - name: userconfig-cloudhsm-mgmt-util-cfg
          mountPath:  /opt/cloudhsm/etc/cloudhsm_mgmt_util.cfg
          subPath: cloudhsm_mgmt_util.cfg
        - name: userconfig-customer-ca-crt
          mountPath:  /opt/cloudhsm/etc/customerCA.crt
          subPath: customerCA.crt



      # This configures the Vault Statefulset to create a PVC for audit logs.
      # See https://www.vaultproject.io/docs/audit/index.html to know more
      auditStorage:
        enabled: true

      # Dev mode - auto-unseal and non-persistent data
      dev:
        enabled: false

      # Run Vault in "HA" mode.
      ha:
        enabled: true
        replicas: 4

        raft:
          enabled: true
          setNodeId: true

          config: |
            ui = true
            disable_mlock = true

            cluster_addr = "https://HOSTNAME.vault-internal:8201" # TEST
            api_addr = "https://HOSTNAME.vault-internal:8200" # TEST
            log_level = "Debug"

            listener "tcp" {
              address = "[::]:8200"   # orginal setting
              cluster_address = "[::]:8201"   # original setting
              tls_cert_file = "/vault/userconfig/tls-server/tls.crt"   # orginal setting
              tls_key_file = "/vault/userconfig/tls-server/tls.key"   # orginal setting
              tls_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"   # orginal setting
              tls_client_ca_file = "/vault/userconfig/tls-ca/ca.crt"  # new variable
              tls_disable = 0 # TEST
            }

            storage "raft" {
              path = "/vault/data"
              tls_skip_verify = "true"
              retry_join {
                leader_api_addr = "https://vault-0.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                leader_client_cert_file = "/vault/userconfig/tls-server/tls.crt"
                leader_client_key_file = "/vault/userconfig/tls-server/tls.key"
              }
              retry_join {
                leader_api_addr = "https://vault-1.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                leader_client_cert_file = "/vault/userconfig/tls-server/tls.crt"
                leader_client_key_file = "/vault/userconfig/tls-server/tls.key"
              }
              retry_join {
                leader_api_addr = "https://vault-2.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                leader_client_cert_file = "/vault/userconfig/tls-server/tls.crt"
                leader_client_key_file = "/vault/userconfig/tls-server/tls.key"
              }
              retry_join {
                  leader_api_addr = "https://vault-3.vault-internal:8200"
                  leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                  leader_client_cert_file = "/vault/userconfig/tls-server/tls.crt"
                  leader_client_key_file = "/vault/userconfig/tls-server/tls.key"
              }
              retry_join {
                  leader_api_addr = "https://vault-4.vault-internal:8200"
                  leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
                  leader_client_cert_file = "/vault/userconfig/tls-server/tls.crt"
                  leader_client_key_file = "/vault/userconfig/tls-server/tls.key"
              }
            }

            seal "pkcs11" {
                lib = "/opt/cloudhsm/lib/libcloudhsm_pkcs11.so"
                slot = "1"
                pin = "vault:hsmdevpasswordsarecool"
                key_label = "vault_dev_v2"
                hmac_key_label = "vault_hmac_dev_v2"
                generate_key = "true"  

            }

            service_registration "kubernetes" {}

    # Vault UI
    ui:
      enabled: true
      # serviceType: "LoadBalancer"
      serviceType: "ClusterIP"
      serviceNodePort: null
      externalPort: 8200


      # For Added Security, edit the below
      #loadBalancerSourceRanges:
      #   - < Your IP RANGE Ex. 10.0.0.0/16 >
      #   - < YOUR SINGLE IP Ex. 1.78.23.3/32 >
