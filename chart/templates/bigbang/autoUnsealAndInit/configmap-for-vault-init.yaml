{{- if and .Values.autoInit.enabled .Release.IsInstall }}
apiVersion: v1
data:
  init.sh: |-
    #!/bin/sh
    ## Use following container vault:1.4.0
    ## Make sure folder name is not ending with /

    KEYS_FOLDER="/vault/data"
    METRICS_POLICY_NAME="prometheus-metrics"
    METRICS_ROLE_NAME="prometheus"
    MONITORING_SERVICE_ACCOUNT_NAME="monitoring-monitoring-kube-prometheus"
    MONITORING_NAMESPACE="monitoring"
    INIT_OUT=/export/init.out

    {{- if not .Values.global.tlsDisable }}
    VAULT_ENDPOINT=https://{{ template "vault.fullname" . }}-0.{{ template "vault.fullname" . }}-internal:8200/v1/sys/unseal
    export VAULT_ADDR=https://vault.{{ .Values.domain }}
    {{- else }}
    VAULT_ENDPOINT=http://{{ template "vault.fullname" . }}-0.{{ template "vault.fullname" . }}-internal:8200/v1/sys/unseal
    export VAULT_ADDR=http://{{ template "vault.fullname" . }}-0.{{ template "vault.fullname" . }}-internal:8200
    {{- end }}

    until curl -L -s -k -f ${VAULT_ADDR} | grep Vault >& /dev/null; do echo "---=== Waiting For Vault Server ===---"; sleep 5; done
    
    echo "---=== Initializing Vault ===---"
    vault operator init -address=$VAULT_ADDR  -recovery-shares=5 -recovery-threshold=3 > $INIT_OUT
    
    export VAULT_TOKEN=$(grep Token $INIT_OUT | cut -d' ' -f  4)
    
    echo "---=== VAULT_TOKEN written to /export/key ===---"
    echo $VAULT_TOKEN > /export/key

    # pick 3 of the master keys to unseal the running instance
    MIN_MASTER_KEYS=$(cat $INIT_OUT | grep -e "2:\|3:\|4:" |  awk '{print $4}')

    # unseal the current instance using the min # of 3 keys   
    KEY_NUMBER=1
    for key in $MIN_MASTER_KEYS
    do
        echo '{"key": "'"$key"'"}' > "$KEYS_FOLDER/master_keys_$KEY_NUMBER.json"
        curl --request PUT --data @"$KEYS_FOLDER/master_keys_$KEY_NUMBER.json" "$VAULT_ENDPOINT"
        KEY_NUMBER=$(( $KEY_NUMBER + 1 ))
    done
  
    # redirect login to avoid password written to logs and retry to avoid race condition
    until vault login -no-store $VAULT_TOKEN >& /dev/null; do echo "Waiting to login to vault"; sleep 5; done;
    echo "---=== Login Success Kubernetes ===---"

    echo "---=== Enabling Kubernetes ===---"
    vault auth enable kubernetes

    echo "---=== Configuring Kubernetes ===---"
    vault write auth/kubernetes/config \
      kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
      token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      issuer="https://kubernetes.default.svc.cluster.local"    

    echo "---=== Writing $METRICS_POLICY_NAME Policy ===---"
    vault policy write $METRICS_POLICY_NAME - << EOF
    path "/sys/metrics" { 
     capabilities = ["read"]
    }
    EOF

    echo "---=== Reading $METRICS_POLICY_NAME Policy ===---"
    vault policy read $METRICS_POLICY_NAME

    echo "---=== Writing $METRICS_POLICY_NAME Auth ===---"
    vault write auth/kubernetes/role/$METRICS_ROLE_NAME bound_service_account_names=$MONITORING_SERVICE_ACCOUNT_NAME bound_service_account_namespaces=$MONITORING_NAMESPACE policies=$METRICS_POLICY_NAME ttl=15m
    
kind: ConfigMap
metadata:
  name: vault-init-cm
{{- end }}
