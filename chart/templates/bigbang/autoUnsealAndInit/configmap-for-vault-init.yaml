{{- if and .Values.autoInit.enabled .Release.IsInstall }}
kind: ConfigMap
metadata:
  name: vault-init-cm
apiVersion: v1
data:
  init.sh: |-
    #!/bin/sh
    ## Use following container vault:1.4.0
    ## Make sure folder name is not ending with /

    set -e

    KEYS_FOLDER="/vault/data"
    METRICS_POLICY_NAME="prometheus-metrics"
    METRICS_ROLE_NAME="prometheus"
    MONITORING_SERVICE_ACCOUNT_NAME="monitoring-monitoring-kube-prometheus"
    MONITORING_NAMESPACE="monitoring"
    INIT_OUT=/export/init.out

    {{- if not .Values.global.tlsDisable }}
    export VAULT_ADDR=https://vault.{{ .Values.domain }}
    {{- else }}
    export VAULT_ADDR={{ include "vault.scheme" . }}://{{ template "vault.fullname" . }}-internal:8200
    {{- end }}

    until curl -L -s -k -f $VAULT_ADDR/v1/sys/seal-status | grep 'initialized' >& /dev/null; do
      echo "---=== Waiting For Vault Server ===---"; 
      sleep 5; 
    done
    
    echo "---=== Initializing Vault ===---"
    until vault operator init -address=$VAULT_ADDR > $INIT_OUT; do
      echo "retry initialize"
      sleep 5;
    done

    export VAULT_TOKEN=$(grep Token $INIT_OUT | cut -d' ' -f  4)
    
    echo "---=== VAULT_TOKEN written to /export/key ===---"
    echo $VAULT_TOKEN > /export/key

    # pick 3 of the master keys to unseal the running instance
    MIN_MASTER_KEYS=$(cat $INIT_OUT | grep -e "2:\|3:\|4:" |  awk '{print $4}')

    # unseal the current instance using the min # of 3 keys   
    KEY_NUMBER=1
    for key in $MIN_MASTER_KEYS
    do
        echo '{"key": "'"$key"'"}' > "$KEYS_FOLDER/master_keys_$KEY_NUMBER.json"
        curl --request PUT --data @"$KEYS_FOLDER/master_keys_$KEY_NUMBER.json" "$VAULT_ADDR/v1/sys/unseal"
        KEY_NUMBER=$(( $KEY_NUMBER + 1 ))
    done

    echo "---=== Logging in ===---"
    until vault login -no-store $VAULT_TOKEN >& /dev/null; 
    do
      echo "Waiting to login to vault"; 
      sleep 5; 
    done

  
    # redirect login to avoid password written to logs and retry to avoid race condition
    until vault login -no-store $VAULT_TOKEN >& /dev/null; 
    do 
      echo "Waiting to login to vault"; 
      sleep 5; 
    done

    echo "---=== Login Success ===---"

    echo "---=== Enabling Kubernetes ===---"
    until vault auth enable kubernetes; 
    do
      echo "retry kubernetes enable"; 
      sleep 5; 
    done

    echo "---=== Configuring Kubernetes ===---"
    until vault write auth/kubernetes/config \
      kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
      token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      issuer="https://kubernetes.default.svc.cluster.local";
    do
      echo "retry kubernetes config";
      sleep 5;
    done
    

    echo "---=== Writing $METRICS_POLICY_NAME Policy ===---"
    until vault policy write $METRICS_POLICY_NAME - <<- EOF
      path "/sys/metrics" { 
      capabilities = ["read"]
      }
    EOF
    do
      echo "retry policy write";
      sleep 5;
    done

    echo "---=== Reading $METRICS_POLICY_NAME Policy ===---"
    until vault policy read $METRICS_POLICY_NAME; do
      echo "retry read";
      sleep 5;
    done

    echo "---=== Writing $METRICS_POLICY_NAME Auth ===---"
    until vault write auth/kubernetes/role/$METRICS_ROLE_NAME \
      bound_service_account_names=$MONITORING_SERVICE_ACCOUNT_NAME \
      bound_service_account_namespaces=$MONITORING_NAMESPACE \
      policies=$METRICS_POLICY_NAME ttl=15m; do
      echo "retry write auth";
      sleep 5;
    done
    touch /export/finished
    exit 0
{{- end }}
